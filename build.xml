<!--
Copyright LWJGL. All rights reserved.
License terms: http://lwjgl.org/license.php
-->
<project name="LWJGL" basedir="." default="all" xmlns:if="ant:if" xmlns:unless="ant:unless">

	<property name="build.sysclasspath" value="ignore"/>

	<property name="config" location="config" relative="true"/>

	<import file="${config}/build-definitions.xml"/>
	<import file="${config}/build-assets.xml"/>
	<import file="${config}/${platform}/build.xml"/>

	<!-- Initialize build -->
	<target name="init" description="Initializes the directories required by the build process">
		<fail message="LWJGL requires Ant version 1.9.3 or higher.">
			<condition>
				<not>
					<antversion atleast="1.9.3"/>
				</not>
			</condition>
		</fail>

		<echo taskname="override" message="Build type: ${build.type}" if:set="env.LWJGL_BUILD_TYPE"/>
		<echo taskname="override" message="Build output: ${build.output}" if:set="env.LWJGL_BUILD_OUTPUT"/>
		<echo taskname="override" message="Build architecture: ${build.arch}" if:set="env.LWJGL_BUILD_ARCH"/>
		<echo taskname="override" message="Build offline: ${build.offline}" if:set="env.LWJGL_BUILD_OFFLINE"/>

		<!-- These depend on LWJGL_BUILD_OUTPUT and may be symlinks -->
		<mkdir-symlink dir="bin"/>
		<mkdir-symlink dir="${src.generated}"/>

		<mkdir dir="${bin.core}"/>
		<mkdir dir="${bin.generator}"/>
		<mkdir dir="${bin.templates}"/>
		<mkdir dir="${bin.tests}"/>
		<mkdir dir="${bin.native}"/>

		<ant antfile="update-dependencies.xml" target="check-dependencies" inheritAll="false"/>

		<taskdef resource="org/jetbrains/kotlin/ant/antlib.xml" classpath="${kotlinc}/lib/kotlin-ant.jar"/>
		<taskdef resource="testngtasks" classpath="libs/testng.jar"/>
	</target>

	<target name="init-generated" description="Initializes the lwjgl3-generated git repository in /generated. [Optional]">
		<confirm-replace dir="${src.generated}" msg="The ${src.generated} directory contents will be replaced with a fresh clone of the lwjgl3-generated repository. Continue?"/>

		<!-- Purge /generated contents -->
		<delete-symlink dir="${src.generated}"/>
		<mkdir-symlink dir="${src.generated}"/>

		<!-- Clone repo -->
		<exec executable="git" failonerror="true">
			<arg value="clone"/>
			<arg value="https://github.com/LWJGL/lwjgl3-generated.git"/>
			<arg value="${src.generated}"/>
		</exec>
	</target>

	<target name="init-wiki" description="Initializes the lwjgl3-wiki git repository in /wiki. [Optional]">
		<confirm-replace dir="${wiki}" msg="The ${wiki} directory contents will be replaced with a fresh clone of the lwjgl3-wiki repository. Continue?"/>

		<delete dir="${wiki}"/>
		<exec executable="git" failonerror="true">
			<arg value="clone"/>
			<arg value="https://github.com/LWJGL/lwjgl3-wiki.wiki.git"/>
			<arg value="${wiki}"/>
		</exec>
	</target>

	<target name="reset" description="Resets the repository to its initial state.">
		<local name="reset.input"/>
		<input
			message="This action will clean everything and also remove libraries and sub-repositories. Continue?"
			validargs="y,n"
			defaultvalue="n"
			addproperty="reset.input"
		/>
		<fail message="Cancelled.">
			<condition>
				<not><equals arg1="y" arg2="${reset.input}"/></not>
			</condition>
		</fail>

		<antcall target="clean"/>

		<delete-symlink dir="${src.generated}"/>
		<delete dir="${wiki}"/>
		<delete dir="${lib}"/>

		<echo message="Reset successful."/>
	</target>

	<target name="clean" description="Cleans all directories controlled by this script" depends="clean-java, clean-native, clean-templates, clean-generated">
		<delete-symlink dir="bin"/>
		<!-- Do not delete /generated, it may contain the lwjgl3-generated git repo -->
		<!-- Do not delete /wiki, it may contain the lwjgl3-wiki git repo -->

		<echo message="Cleanup successful."/>
	</target>

	<target name="clean-java" description="Deletes Java binary files produced by this script">
		<delete dir="${bin.core}"/>
		<delete dir="${bin.tests}"/>
	</target>

	<target name="clean-native" description="Deletes native binary files produced by this script">
		<delete dir="${bin.native}"/>
	</target>

	<target name="clean-templates" description="Deletes template binary files produced by this script">
		<delete dir="${bin.generator}"/>
		<delete dir="${bin.templates}"/>
	</target>

	<target name="clean-generated" description="Deletes sources, test results and documentation generated by this script" depends="clean-generated-java,clean-generated-native">
		<delete dir="${bin.html.tests}"/>
		<delete dir="${bin.html.javadoc}"/>
	</target>

	<target name="clean-generated-java" description="Deletes Java sources generated by this script">
		<delete file="${src.generated}/touch.txt" quiet="true"/>
		<delete dir="${src.generated.java}"/>
	</target>

	<target name="clean-generated-native" description="Deletes native sources generated by this script">
		<delete file="${src.generated}/touch.txt" quiet="true"/>
		<delete dir="${src.generated.native}"/>
	</target>

	<target name="all" description="Build LWJGL and runs the tests" depends="compile-templates, tests"/>

	<target name="compile-generator" description="Compiles the Generator module" depends="init">
		<local name="generator-uptodate"/>
		<dir-uptodate src="${src.generator}/kotlin" dst="${bin.generator}" property="generator-uptodate"/>

		<echo message="Compiling Kotlin generator..." level="info" taskname="Generator" unless:set="generator-uptodate"/>
		<kotlinc moduleName="Generator" output="${bin.generator}" printVersion="true" unless:set="generator-uptodate">
			<compilerarg value="-Xno-call-assertions"/>
			<compilerarg value="-Xno-param-assertions"/>
			<compilerarg value="-Xreport-perf"/>

			<src path="${src.generator}/kotlin"/>
		</kotlinc>
	</target>

	<target name="compile-templates" description="Compiles the Templates module" depends="compile-generator, bindings">
		<local name="templates-uptodate"/>
		<dir-uptodate src="${src.templates}/kotlin" dst="${bin.templates}" property="templates-uptodate"/>

		<echo message="Compiling Kotlin templates. This will take 1-2 minutes..." level="info" taskname="Templates" unless:set="templates-uptodate"/>
		<kotlinc moduleName="Templates" output="${bin.templates}" printVersion="true" unless:set="templates-uptodate">
			<classpath>
		        <pathelement location="${bin.generator}"/>
		    </classpath>

			<compilerarg value="-Xno-call-assertions"/>
			<compilerarg value="-Xno-param-assertions"/>
			<compilerarg value="-Xreport-perf"/>

			<src path="${src.templates.kotlin}/org/lwjgl/egl" if:true="${binding.egl}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/egl/EGLTypes.kt" unless:true="${binding.egl}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/glfw" if:true="${binding.glfw}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/hwloc" if:true="${binding.hwloc}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/nanovg" if:true="${binding.nanovg}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/openal" if:true="${binding.openal}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/opencl" if:true="${binding.opencl}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/opencl/CLTypes.kt" unless:true="${binding.opencl}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/opengl" if:true="${binding.opengl}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/opengl/GLTypes.kt" unless:true="${binding.opengl}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/opengles" if:true="${binding.opengles}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/ovr" if:true="${binding.ovr}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/stb" if:true="${binding.stb}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/vulkan" if:true="${binding.vulkan}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/vulkan/VKypes.kt" unless:true="${binding.vulkan}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/vulkan/ExtensionTypes.kt" unless:true="${binding.vulkan}"/>

			<src path="${src.templates.kotlin}/org/lwjgl/system/dyncall"/>
			<src path="${src.templates.kotlin}/org/lwjgl/system/jawt" if:true="${binding.jawt}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/system/jemalloc"/>
			<src path="${src.templates.kotlin}/org/lwjgl/system/libc"/>
			<src path="${src.templates.kotlin}/org/lwjgl/system/linux"/>
			<src path="${src.templates.kotlin}/org/lwjgl/system/macosx"/>
			<src path="${src.templates.kotlin}/org/lwjgl/system/windows"/>

			<src path="${src.templates.kotlin}/org/lwjgl/util/lmdb" if:true="${binding.lmdb}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/util/nfd" if:true="${binding.nfd}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/util/par" if:true="${binding.par}"/>
			<src path="${src.templates.kotlin}/org/lwjgl/util/simd"/>
			<src path="${src.templates.kotlin}/org/lwjgl/util/xxhash"/>
		</kotlinc>
	</target>

	<target name="-compile-generator-tools" description="Compiles the Generator tools" depends="init">
		<lwjgl.javac destdir="${bin.generator}">
			<src path="${src.generator}/java"/>
			<include name="org/lwjgl/generator/util/**"/>
		</lwjgl.javac>
	</target>

	<target name="formatter" description="Runs the template formatter tool" depends="-compile-generator-tools">
		<java
			classname="org.lwjgl.generator.util.TemplateFormatter"
			fork="true"
			spawn="true"
		>
			<classpath>
				<pathelement path="${bin.generator}"/>
				<pathelement path="${test.resources}"/>
			</classpath>
		</java>
	</target>

	<target name="generate" description="Runs the Generator" depends="init, bindings">
		<local name="has-compiled-templates"/>
		<available file="${bin.templates}/META-INF/Templates.kotlin_module" property="has-compiled-templates"/>
		<fail unless="has-compiled-templates" message="Please invoke the compile-templates target first."/>

		<local name="generated-uptodate"/>
		<uptodate property="generated-uptodate" targetfile="${src.generated}/touch.txt">
			<srcfiles dir="${config}" includes="build-bindings.xml"/>
			<srcfiles dir="${bin.generator}" includes="**"/>
			<srcfiles dir="${bin.templates}" includes="**"/>
		</uptodate>

		<java
			classname="org.lwjgl.generator.GeneratorKt"
			fork="true"
			failonerror="true"
			taskname="Generator"
		    unless:set="generated-uptodate"
		>
			<classpath>
				<pathelement path="${bin.generator}"/>
				<pathelement path="${bin.templates}"/>
				<pathelement path="${kotlinc}/lib/kotlin-runtime.jar"/>
			</classpath>

			<jvmarg value="-server"/>
			<jvmarg line="${bindings}"/>

			<arg value="${src.templates.kotlin}"/>
			<arg value="${src.generated}"/>
		</java>
		<touch file="${src.generated}/touch.txt" verbose="false" unless:set="generated-uptodate"/>
	</target>

	<target name="-init-compile" description="Initializes properties required for compilation" depends="bindings">
		<patternset id="core.main.files">
			<include name="org/lwjgl/*.java"/>
			<include name="org/lwjgl/system/**"/>

			<include name="org/lwjgl/egl/**" if:true="${binding.egl}"/>
			<include name="org/lwjgl/glfw/**" if:true="${binding.glfw}"/>
			<include name="org/lwjgl/nanovg/**" if:true="${binding.nanovg}"/>
			<include name="org/lwjgl/openal/**" if:true="${binding.openal}"/>
			<include name="org/lwjgl/opencl/**" if:true="${binding.opencl}"/>
			<include name="org/lwjgl/opengl/**" if:true="${binding.opengl}"/>
			<include name="org/lwjgl/opengles/**" if:true="${binding.opengles}"/>
			<include name="org/lwjgl/vulkan/**" if:true="${binding.vulkan}"/>
		</patternset>

		<patternset id="core.generated.files">
			<include name="org/lwjgl/egl/**" if:true="${binding.egl}"/>
			<include name="org/lwjgl/glfw/**" if:true="${binding.glfw}"/>
			<include name="org/lwjgl/nanovg/**" if:true="${binding.nanovg}"/>
			<include name="org/lwjgl/openal/**" if:true="${binding.openal}"/>
			<include name="org/lwjgl/opencl/**" if:true="${binding.opencl}"/>
			<include name="org/lwjgl/opengl/**" if:true="${binding.opengl}"/>
			<include name="org/lwjgl/opengles/**" if:true="${binding.opengles}"/>
			<include name="org/lwjgl/ovr/**" if:true="${binding.ovr}"/>
			<include name="org/lwjgl/stb/**" if:true="${binding.stb}"/>
			<include name="org/lwjgl/vulkan/**" if:true="${binding.vulkan}"/>

			<include name="org/lwjgl/system/JNI.*"/>
			<include name="org/lwjgl/system/dyncall/**"/>
			<include name="org/lwjgl/system/jemalloc/**"/>
			<include name="org/lwjgl/system/libc/**"/>
			<include name="org/lwjgl/system/linux/**"/>
			<include name="org/lwjgl/system/macosx/**"/>
			<include name="org/lwjgl/system/windows/**"/>
			<include name="org/lwjgl/system/jawt/**" if:true="${binding.jawt}"/>

			<include name="org/lwjgl/util/nfd/**" if:true="${binding.nfd}"/>
			<include name="org/lwjgl/util/par/**" if:true="${binding.par}"/>
			<include name="org/lwjgl/util/simd/**"/>
			<include name="org/lwjgl/util/xxhash/**"/>
		</patternset>
	</target>

	<target name="compile" description="Compiles the Java source code" depends="generate, -init-compile">
		<lwjgl.javac destdir="${bin.core}" taskname="Core">
			<src>
				<pathelement path="${src.core}"/>
				<pathelement path="${src.generated.java}"/>
			</src>

			<patternset refid="core.main.files"/>
			<patternset refid="core.generated.files"/>

			<patternset excludes="**/package-info.java"/>

			<!-- Supresses internal API (e.g. Unsafe) usage warnings -->
			<compilerarg value="-XDignore.symbol.file=true"/>
		</lwjgl.javac>
	</target>

	<target name="compile-native" description="Compiles the native source code" depends="init, compile">
		<antcall target="compile-native-platform"/>
	</target>

	<target name="compile-tests" description="Compiles the LWJGL test suite" depends="compile">
		<local name="egl_glfw"/>
		<condition property="egl_glfw" value="true" else="false">
			<and>
				<istrue value="${binding.egl}"/>
				<istrue value="${binding.opengles}"/>
				<istrue value="${binding.glfw}"/>
			</and>
		</condition>

		<local name="openal_stb"/>
		<condition property="openal_stb" value="true" else="false">
			<and>
				<istrue value="${binding.openal}"/>
				<istrue value="${binding.stb}"/>
			</and>
		</condition>

		<local name="opencl_glfw"/>
		<condition property="opencl_glfw" value="true" else="false">
			<and>
				<istrue value="${binding.opencl}"/>
				<istrue value="${binding.glfw}"/>
			</and>
		</condition>

		<local name="stb_glfw"/>
		<condition property="stb_glfw" value="true" else="false">
			<and>
				<istrue value="${binding.stb}"/>
				<istrue value="${binding.glfw}"/>
			</and>
		</condition>

		<local name="nanovg"/>
		<condition property="nanovg" value="true" else="false">
			<and>
				<istrue value="${binding.nanovg}"/>
				<istrue value="${binding.glfw}"/>
				<istrue value="${binding.opengl}"/>
			</and>
		</condition>

		<local name="nfd"/>
		<condition property="nfd" value="true" else="false">
			<and>
				<istrue value="${binding.nfd}"/>
				<istrue value="${binding.glfw}"/>
				<istrue value="${binding.opengl}"/>
			</and>
		</condition>

		<lwjgl.javac destdir="${bin.tests}" taskname="Tests">
			<classpath>
				<pathelement path="${bin.core}"/>
				<pathelement path="${lib}/testng.jar"/>
				<pathelement path="${lib}/jmh-core.jar"/>
				<pathelement path="${lib}/jmh-generator-annprocess.jar"/>
			</classpath>

			<src path="${src.tests}/"/>

			<!-- Demos -->
			<include name="org/lwjgl/demo/egl/**" if:true="${egl_glfw}"/>
			<include name="org/lwjgl/demo/glfw/**" if:true="${binding.glfw}"/>
			<include name="org/lwjgl/demo/nanovg/**" if:true="${nanovg}"/>

			<include name="org/lwjgl/demo/openal/**" if:true="${binding.openal}"/>
			<exclude name="org/lwjgl/demo/openal/ALCDemo.java" unless:true="${openal_stb}"/>
			<exclude name="org/lwjgl/demo/openal/EFXTest.java" unless:true="${openal_stb}"/>

			<include name="org/lwjgl/demo/opencl/**" if:true="${opencl_glfw}"/>
			<include name="org/lwjgl/demo/opencl/CLDemo.java" if:true="${binding.opencl}"/>

			<include name="org/lwjgl/demo/opengl/**" if:true="${binding.glfw}"/>

			<include name="org/lwjgl/demo/ovr/**" if:true="${binding.ovr}"/>
			<include name="org/lwjgl/demo/stb/**" if:true="${stb_glfw}"/>

			<include name="org/lwjgl/demo/system/jawt/**" if:true="${binding.jawt}"/>

			<include name="org/lwjgl/demo/util/*.java"/>
			<include name="org/lwjgl/demo/util/nfd/**" if:true="${nfd}"/>
			<include name="org/lwjgl/demo/util/par/**" if:true="${binding.par}"/>
			<include name="org/lwjgl/demo/util/xxhash/**"/>

			<include name="org/lwjgl/demo/vulkan/**" if:true="${binding.vulkan}"/>

			<!-- Tests -->
			<include name="org/lwjgl/opencl/**" if:true="${binding.opencl}"/>
			<include name="org/lwjgl/system/**"/>
			<include name="org/lwjgl/util/**"/>

			<!-- Benchmarks -->
			<include name="org/lwjgl/jmh/**"/>
		</lwjgl.javac>
	</target>

	<target name="-init-runtime" description="Initializes properties required for running demos and tests">
		<path id="runtime.classpath">
			<pathelement path="${bin.core}"/>
			<pathelement path="${test.resources}"/>
			<pathelement path="${bin.tests}"/>
		</path>
	</target>

	<target name="tests" description="Runs the LWJGL test suite" depends="compile-tests, compile-native, -init-runtime">
		<testng outputDir="${bin.html.tests}" classpathref="runtime.classpath" taskname="Tests">
			<classpath>
				<pathelement path="${lib}/jcommander.jar"/>
			</classpath>

			<!--<jvmarg value="-Xcheck:jni"/>--> <!-- SIMD fails with this (see -XX:+RestoreMXCSROnJNICall) -->
			<jvmarg value="-ea"/>
			<jvmarg value="-Dorg.lwjgl.util.Debug=true"/>
			<jvmarg value="-Dorg.lwjgl.util.DebugAllocator=true"/>
			<jvmarg value="-Djava.library.path=${lib}"/>
			<jvmarg value="-XstartOnFirstThread" if:set="platform.macosx"/>
			<jvmarg line="${jvmargs}" if:set="jvmargs"/>

			<xmlfileset dir="${config}" includes="tests.xml,tests_${platform}.xml"/>
		</testng>
	</target>

	<target name="demo" description="Runs an LWJGL demo" depends="compile-tests, compile-native, -init-runtime, -update-assets">
		<fail message="Please use -Dclass=&lt;class&gt; to specify the demo main class to run." unless="class"/>

		<local name="spawn"/>
		<condition property="spawn" value="true" else="false">
			<isset property="jitwatch"/>
		</condition>

		<local name="failonerror"/>
		<condition property="failonerror" value="false" else="true">
			<istrue value="${spawn}"/>
		</condition>

		<java classname="${class}" classpathref="runtime.classpath" fork="true" failonerror="${failonerror}" spawn="${spawn}" taskname="Demo">
			<classpath>
				<pathelement path="${lib}/testng.jar"/>
				<pathelement path="${lib}/jmh-core.jar"/>
				<pathelement path="${lib}/commons-math3.jar"/>
				<pathelement path="${lib}/jopt-simple.jar"/>
			</classpath>

			<jvmarg value="-Djava.library.path=${lib}"/>
			<jvmarg value="-XstartOnFirstThread" if:set="platform.macosx"/>
			<!--<jvmarg value="-Xcheck:jni"/>-->

			<jvmarg line="-XX:+UnlockDiagnosticVMOptions -XX:+TraceClassLoading -XX:+LogCompilation" if:set="jitwatch"/>
			<jvmarg line="-XX:+PrintAssembly -XX:PrintAssemblyOptions=intel -XX:-TieredCompilation -XX:-UseCompressedOops" if:set="jitwatch"/>
			<jvmarg line="-XX:LogFile=${jitwatch}" if:set="jitwatch"/>

			<jvmarg line="${jvmargs}" if:set="jvmargs"/>

			<arg line="${args}" if:set="args"/>
		</java>
	</target>

	<target name="-build-version" description="Retrieves the LWJGL version from org.lwjgl.Version">
		<java classname="org.lwjgl.Version" fork="true" failonerror="true" outputproperty="build.version">
			<classpath path="${bin.core}"/>
			<jvmarg value="-Djava.library.path=${lib}"/>
		</java>
	</target>

	<target name="javadoc" description="Generates the LWJGL JavaDoc" depends="generate">
		<uptodate targetfile="${bin.html.javadoc}/index.html" property="javadoc-uptodate">
			<srcfiles dir="${src.core}" includes="**"/>
			<srcfiles dir="${src.generator}/java" includes="org/lwjgl/system/**"/>
			<srcfiles dir="${src.generated.java}" includes="**"/>
			<srcfiles dir="${config}" includes="javadoc.css"/>
		</uptodate>
		<antcall target="-javadoc"/>
	</target>

	<target name="-javadoc" description="Generates the LWJGL JavaDoc" depends="-init-compile,-build-version" unless="javadoc-uptodate">
		<lwjgl.javac destdir="${bin.generator}" taskname="Compile doclets">
			<src path="${src.generator}/java"/>
			<include name="org/lwjgl/system/**"/>
			<classpath>
				<pathelement location="${env.JAVA_HOME}/lib/tools.jar"/>
			</classpath>
		</lwjgl.javac>

		<delete dir="${bin.html.javadoc}"/>
		<javadoc
			destdir="${bin.html.javadoc}"
			source="1.8"
			windowtitle="LWJGL ${build.version}"
			encoding="UTF-8"
			docencoding="UTF-8"
			charset="UTF-8"
			useexternalfile="true"
			nohelp="true"
			notree="true"
			public="true"
			doclet="org.lwjgl.system.ExcludeDoclet"
			docletpath="${bin.generator}"
		    maxmemory="1G"
		    failonerror="true"
		>
			<doctitle><![CDATA[<h1>Lightweight Java Game Library</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright LWJGL. All Rights Reserved. <a href="http://lwjgl.org/license.php">License terms</a>.</i>]]></bottom>

			<classpath>
				<pathelement path="${src.core}"/>
				<pathelement path="${src.generated.java}"/>
			</classpath>

			<fileset dir="${src.core}">
				<patternset refid="core.main.files"/>
			</fileset>

			<fileset dir="${src.generated.java}">
				<patternset refid="core.generated.files"/>
			</fileset>

			<arg value="-XDignore.symbol.file=true"/> <!-- Supresses internal API (e.g. Unsafe) usage warnings -->

			<arg value="-Xdoclint"/>
			<arg value="-html5" if:set="jdk9"/>
			<arg value="-stylesheetfile ${config}/javadoc.css" if:set="jdk9"/>
			<arg line="-J-Dfile.encoding=UTF8"/>
			<arg line="-J-XaddExports:jdk.javadoc/com.sun.tools.doclets.standard=ALL-UNNAMED" if:set="jdk9"/>
		</javadoc>
		<get-quiet name="favicon" url="http://s3.amazonaws.com/cdn.lwjgl.org/favicon.ico" dest="${bin.html.javadoc}"/>

		<java classname="org.lwjgl.system.JavadocPostProcess" fork="true" failonerror="true">
			<classpath path="${bin.generator}"/>

			<arg value="${bin.html.javadoc}/org/lwjgl"/>
		</java>
	</target>

	<target name="release" description="Creates the LWJGL binary redistributable" depends="compile,javadoc,-build-version">
		<!-- Download binaries from build.lwjgl.org -->
		<mkdir dir="${release.native}"/>

		<get dest="${release.native}" verbose="false" usetimestamp="true">
			<!-- Linux -->
			<url url="http://build.lwjgl.org/${build.type}/linux/x64/liblwjgl.so"/>
			<url url="http://build.lwjgl.org/${build.type}/linux/x64/libjemalloc.so"/>
			<url url="http://build.lwjgl.org/${build.type}/linux/x64/libglfw.so"/>
			<url url="http://build.lwjgl.org/${build.type}/linux/x64/libopenal.so"/>

			<!--<url url="http://build.lwjgl.org/${build.type}/linux/x86/liblwjgl.so"/>
			<url url="http://build.lwjgl.org/${build.type}/linux/x86/libjemalloc.so"/>
			<url url="http://build.lwjgl.org/${build.type}/linux/x86/libglfw.so"/>
			<url url="http://build.lwjgl.org/${build.type}/linux/x86/libopenal.so"/>-->

			<!-- Mac OS X -->
			<url url="http://build.lwjgl.org/${build.type}/macosx/x64/liblwjgl.dylib"/>
			<url url="http://build.lwjgl.org/${build.type}/macosx/x64/libjemalloc.dylib"/>
			<url url="http://build.lwjgl.org/${build.type}/macosx/x64/libglfw.dylib"/>
			<url url="http://build.lwjgl.org/${build.type}/macosx/x64/libopenal.dylib"/>

			<!-- Windows -->
			<url url="http://build.lwjgl.org/${build.type}/windows/x64/lwjgl.dll"/>
			<url url="http://build.lwjgl.org/${build.type}/windows/x64/jemalloc.dll"/>
			<url url="http://build.lwjgl.org/${build.type}/windows/x64/glfw.dll"/>

			<url url="http://build.lwjgl.org/${build.type}/windows/x86/lwjgl.dll"/>
			<url url="http://build.lwjgl.org/${build.type}/windows/x86/jemalloc.dll"/>
			<url url="http://build.lwjgl.org/${build.type}/windows/x86/glfw.dll"/>

			<firstmatchmapper>
				<regexpmapper from="x86/(\w+)[.](\w+)" to="\132.\2"/> <!-- Append "32" -->
				<flattenmapper/>
			</firstmatchmapper>
		</get>
		<!-- Windows OpenAL -->
		<get src="http://build.lwjgl.org/${build.type}/windows/x64/OpenAL32.dll" dest="${release.native}/OpenAL.dll" verbose="false" usetimestamp="true"/>
		<get src="http://build.lwjgl.org/${build.type}/windows/x86/OpenAL32.dll" dest="${release.native}" verbose="false" usetimestamp="true"/>

		<local name="liblwjgl-so"/>
		<local name="liblwjgl-dylib"/>
		<local name="lwjgl-dll"/>
		<local name="lwjgl32-dll"/>

		<checksum file="${release.native}/liblwjgl.so" algorithm="SHA-1" property="liblwjgl-so"/>
		<checksum file="${release.native}/liblwjgl.dylib" algorithm="SHA-1" property="liblwjgl-dylib"/>
		<checksum file="${release.native}/lwjgl.dll" algorithm="SHA-1" property="lwjgl-dll"/>
		<checksum file="${release.native}/lwjgl32.dll" algorithm="SHA-1" property="lwjgl32-dll"/>

		<!-- Bundle classes -->
		<mkdir dir="${release.jar}"/>
		<jar destfile="${release.jar}/lwjgl.jar" basedir="${bin.core}" includes="**" level="9" index="true">
			<manifest>
				<section name="org/lwjgl/">
					<attribute name="Specification-Title" value="Lightweight Java Game Library"/>
					<attribute name="Specification-Version" value="${build.version}"/>
					<attribute name="Specification-Vendor" value="lwjgl.org"/>
					<attribute name="Implementation-Title" value="lwjgl"/>
					<attribute name="Implementation-Version" value="build ${build.revision}" if:set="build.revision"/>
					<attribute name="Implementation-Version" value="SNAPSHOT" unless:set="build.revision"/>
					<attribute name="Implementation-Vendor" value="lwjgl.org"/>
					<attribute name="liblwjgl-so" value="${liblwjgl-so}"/>
					<attribute name="liblwjgl-dylib" value="${liblwjgl-dylib}"/>
					<attribute name="lwjgl-dll" value="${lwjgl-dll}"/>
					<attribute name="lwjgl32-dll" value="${lwjgl32-dll}"/>
				</section>
			</manifest>
		</jar>

		<!-- Bundle javadoc -->
		<mkdir dir="${release.doc}"/>
		<zip destfile="${release.doc}/javadoc.zip" basedir="${bin.html.javadoc}" includes="**" level="9"/>

		<!-- Copy license files -->
		<copy file="LICENSE.md" tofile="${release}/LICENSE"/>
		<copy todir="${release.doc}">
			<fileset dir="${doc}" includes="3rdparty/**"/>
		</copy>

		<!-- Bundle source -->
		<zip destfile="${release}/src.zip" level="9">
			<fileset dir="${src.core}">
				<patternset refid="core.main.files"/>
			</fileset>

			<fileset dir="${src.generated.java}">
				<patternset refid="core.generated.files"/>
			</fileset>
		</zip>

		<echo file="${release}/build.txt" if:set="build.revision">LWJGL ${build.version} build ${build.revision}</echo>
	</target>
</project>